# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\:
        resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/AppBundle/{Entity,Repository,Tests}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    # add more services, or override services that need manual wiring
    # AppBundle\Service\ExampleService:
    #     arguments:
    #         $someArgument: 'some_value'
    
    gedmo.listener.softdeleteable:
        class: Gedmo\SoftDeleteable\SoftDeleteableListener
        tags:
            - { name: doctrine.event_subscriber, connection: default }

    gedmo.listener.sluggable:
        class: Gedmo\Sluggable\SluggableListener
        tags:
            - { name: doctrine.event_subscriber, connection: default }
        calls:
            - [ setAnnotationReader, [ "@annotation_reader" ] ]

    app.admin.Category:
        class: AppBundle\Admin\CategoryAdmin
        arguments: [~, AppBundle\Entity\Category, ~]
        tags:
            - name: sonata.admin
              manager_type: orm
              group: "Contenu"
              label: "Catégorie"
        public: true

    app.admin.Section:
        class: AppBundle\Admin\SectionAdmin
        arguments: [~, AppBundle\Entity\Section, ~]
        tags:
            - name: sonata.admin
              manager_type: orm
              group: "Contenu"
              label: "Rubrique"
        public: true

    app.admin.Content:
        class: AppBundle\Admin\ContentAdmin
        arguments: [~, AppBundle\Entity\Content, ~]
        tags:
            - name: sonata.admin
              manager_type: orm
              group: "Contenu"
              label: "Sous Rubrique"
        public: true

    app.admin.ContentBlock:
        class: AppBundle\Admin\ContentBlockAdmin
        arguments: [~, AppBundle\Entity\ContentBlock, ~]
        tags:
            - name: sonata.admin
              manager_type: orm
              group: "Contenu"
              label: "Contenus"
        public: true

    app.admin.Query:
        class: AppBundle\Admin\QueryAdmin
        arguments: [~, AppBundle\Entity\Query, ~]
        tags:
            - name: sonata.admin
              manager_type: orm
              group: "Contenu"
              label: "Requète"
        public: true

    app.admin.QueryFilter:
        class: AppBundle\Admin\QueryFilterAdmin
        arguments: [~, AppBundle\Entity\QueryFilter, ~]
        tags:
            - name: sonata.admin
              manager_type: orm
              group: "Contenu"
              label: "Filtre"
        public: true

    app.admin.News:
        class: AppBundle\Admin\NewsAdmin
        arguments: [~, AppBundle\Entity\News, ~]
        tags:
            - name: sonata.admin
              manager_type: orm
              group: "Contenu"
              label: "Nouveautés"
        public: true

    app.admin.Organism:
        class: AppBundle\Admin\OrganismAdmin
        arguments: [~, AppBundle\Entity\Organism, ~]
        tags:
            - name: sonata.admin
              manager_type: orm
              group: "Contenu"
              label: "Organisme"
        public: true

    admin.media:
        class: AppBundle\Admin\MediaAdmin
        arguments: [~, AppBundle\Entity\Media, ~]
        tags:
            - name: sonata.admin
              manager_type: orm
              group: "Contenu"
              show_in_dashboard: false
              label: "Media"
        public: false